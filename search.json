[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Agent-based modeling for sustainability",
    "section": "",
    "text": "Welcome!\nThese are the course notes and manual for the Agent-based Modeling for Sustainability, the second course in the Computational Social Science for Sustainability (CSS4S) series at the Stanford Doerr School of Sustainability.\nThe course and the socmod library are under active development. If you have suggestions, questions, want to report typos, etc., please help me out and open an issue on the repo’s GitHub page.\nThis website and associated course content is and will always be free, licensed under the CC BY-NC-ND 4.0 License.\nThis online book is divided in two parts:\n\nNotes on the theory and application of agent-based modeling to promoting the social diffusion of sustainable practices through social learning and social influence. Continue on to the Introduction to read the Notes.\nTechnical manual that reviews the skills and techniques needed to develop agent-based models for sustainability and present the results in a scientific article.\n\nPlease select a chapter from the list to the left or continue to the Introduction.",
    "crumbs": [
      "Welcome!"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "1.1 Why agent-based models are useful\nIndigenous, local peoples of the South Pacific Islands and other coastal habitats have sustainably managed mangrove forests to dissipate storm surges and prevent erosion, mitigating potential costs of climate change since long before the anthropocene (Alongi 2002; Nalau et al. 2018; Pearson, McNamara, and Nunn 2020; McNamara et al. 2020). First peoples of western North America have similarly practiced prescribed burns to prevent destructive wildfires during times of drought for millennia (Eisenberg et al. 2019; Kolden 2019). Despite their long-known effectiveness, adaptive practices like these often fail to spread widely. Instead, international development agencies frequently advocate for the construction of seawalls, for example, even though seawalls can exacerbate flooding once breached and incur high maintenance costs (Piggott-McKellar et al. 2020). Inland forest management is beset by polarization among stakeholders (Swette, Huntsinger, and Lambin 2023), resulting in devastating wildfires burning a buildup of fuels or greenhouse gas-intensive clearcuts.\nHere we introduce what we dub the puzzle of diffusion: why do some effective, sustainable practices like mangrove forest management fail to diffuse broadly, while other less effective or even maladaptive practices become widespread (Figure 1.1)? To answer this, we answer some more basic questions along the way. First, how do people decide what to do, i.e., how does learning work? Second, what is the effect of identity on how well or how likely we are to learn from people of the same or different identity? Third, what is the effect of social structure, i.e., who knows whom, represented as a social network? Agent-based models are useful because they provide a framework for creating rigorous, mechanistic, concrete models of social diffusion of adaptations. They help us deal with the complexity of causation in the real world through strategic selection of causal input variables and model details, which, over several model time steps, lead to social emergent phenomena like the diffusion of climate change adaptations.\nThe focus of this course is developing agent-based models that can help us simplify complex combinations of cognitive and social factors to represent only the most relevant ones, and observe the effect of these on simulated outcomes such as the proportion of people adopting adaptive behaviors, or opinion extremism and polarization.\nAgent-based models (ABMs) provide a structured way to explore complex systems by simulating interactions between autonomous agents, i.e., simulated people. In sustainability contexts, ABMs offer a low-cost testbed for understanding how interventions might impact social dynamics and environmental outcomes. For example, Airoldi and Christakis (2024) demonstrated through regression analysis across that one method for selecting individuals targeted in a public health education campaign worked better than another. They studied over 20,000 individuals across Honduran villages of about 100 people each to reach their findings. Real-world verification of the efficacy of different intervention strategies is important. However, we can also use agent-based models to represent the diffusion of information in simulated populations where interactions are structured by model social networks. We can initialize thousands or millions of simulated villages in which this information could diffuse with different intervention strategies, and observe the distribution of the adoption of sustainable behaviors for each potential intervention strategy. We can then analyze which performed best in silico, which can be helpful if interventions will be taken to different contexts. In other worlds, we can use ABMs to deduce how different learning rules, group identities, and social structures shape sustainability outcomes generally, which can guide our selection of real-world intervention strategies.\nA typical ABM simulation cycle includes (Figure 1.2):\nWe will analyze and draw on several real-world empirical studies of interventions to develop our agent-based models that we in turn will use to simulate interventions in order to deduce which strategies are most effective for social interventions to promote sustainability, and why. A social intervention (or just intervention) for promoting sustainability is any concerted effort where those promoting a sustainable practice introduces information about how to perform that practice to a population. Deductive methods complement regression-based inferential or inductive strategies. Deductive strategies can explain which strategies are most effective and why in idealized, cost-free settings (cost-free at least compared to the cost of real-world social interventions at scale).\nLow-cost experimentation with simulated social interventions to promote sustainability are critical. Unless progress is accelerated towards we can expect to “have 575 million people living in extreme poverty, 600 million people facing hunger, and 84 million children and young people out of school. Humanity will overshoot the Paris climate agreement’s 1.5°C ‘safe’ guardrail on…temperature rise. And, at the current rate, it will take 300 years to attain gender equality” (Malekpour et al. 2023, 250). Accelerated transformations are required to reach goals necessary to avoid increasingly frequent and costly climate change disasters (United Nations 2023). It is not plausible to do real-world experiments at the global scale required to infer which strategies work best in which situations.\nIn this course we will focus on deducing how between different cognitive and social factors, or other initial conditions, affect simulated sustainability intervention outcomes. We will frame our studies in terms of sustainable development goals, but we will never fit our models to observations. Nonetheless, we will strive to develop models that are amenable to real-world interventions against which the models could be fit and predictions could be compared. It seems this is not done too much in practice yet in sustainability. However, some of our colleagues focused on studying basic processes that underlie cultural transmission do exactly this to explain experimental data and archaeological observations (Deffner et al. 2024), which thereby improves their theory, models, and understanding of cultural evolution in a theory-model-observation cycle. With more time and research effort, this cycle may become commonplace in sustainability.\nThe urgent need to understand how sustainable behaviors spread in order to develop effective interventions pressures social scientists to make social science more rigorous, reliable, and digestible by non-social scientists. In the rest of this Introduction we review cognitive and social theories of social learning, identity and influence, homophily and core-periphery network structures, and preview the remainder of the course material. For an overview of the course feel free to skip ahead to the Plan in table format.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#why-agent-based-models-are-useful",
    "href": "intro.html#why-agent-based-models-are-useful",
    "title": "1  Introduction",
    "section": "",
    "text": "Initializing agent populations and environmental conditions\nIterative steps where agents select partners, interact, and update behaviors based on outcomes and learning rules\nRepeating these steps until specific conditions or thresholds are met\nGenerating output data for analysis\n\n\n\n\n\n\n\nFigure 1.2: Agent-based modeling simulation cycle.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#social-learning-strategies",
    "href": "intro.html#social-learning-strategies",
    "title": "1  Introduction",
    "section": "1.2 Social learning strategies",
    "text": "1.2 Social learning strategies\nHuman kind is set apart by powerful learning and reasoning capabilities (Witt et al. 2024) that enable cultural transmission and accumulation of technologies and practices no other species matches (Henrich 2015). For our sustainability models, we only need simple models of cognition and learning. It would never be practical to do psychological or cognitive tests in the context of sustainability interventions that targets large populations, for one thing, so we could never compare detailed cognitive assumptions or predictions with reality. For our purposes we will consider three general classes of learning strategy:\n\nSuccess-biased learning: Individuals are more likely to adopt behaviors perceived to be successful or beneficial.\nFrequency-biased learning: Individuals adopt behaviors because others are already doing them, creating a conformity effect.\nContagion: Individuals copy behaviors simply by observing others performing them.\n\nIn the mangrove versus seawall example, success-biased learning might favor seawalls if influential external actors, who seem successful or wealthy, advocate for them, even if seawalls are ultimately less effective. Mangrove forests might become widely adopted if, on the other hand, frequency-biased learning predominates and many communities have adopted that method.\n\n1.2.1 Formal social learning models with example\nTo make this more concrete, we formalize (i.e., give formulas for) these three learning strategies as follows using the example in Figure 1.3. In the example, there is one focal agent who is the one doing the observing/learning, labelled with the ID 1, and three social network neighbors with IDs 2, 3, and 4. The focal agent is deciding whether or not to install residential solar. One of his neighbors has installed it, 2. Based on 1’s perception, 2 is the wealthiest, represented by four dollar symbols. 3 is perceived to have one dollar and 4 has two dollars.\n\n\n\n\n\n\nFigure 1.3: Agent 1, the focal agent, is considering whether to install residential solar. The probability agent 1 installs residential solar depends on its social learning strategy.\n\n\n\n\n1.2.1.1 Success-biased learning\nIn success-biased learning, learners first choose an interaction partner/teacher randomly weighted by observed fitness of their neighbors, which is a generic term for wealth, power, status, etc. In general for this case, the probability that learner \\(i\\) chooses teacher \\(j\\) is\n\\[\n\\Pr(i \\text{ chooses } j) = \\frac{f_j}{\\sum_{k \\in n_i} f_k}.\n\\]\nThe probability that \\(i\\) adopts \\(A\\) is then the sum of the probabilities of choosing each neighbor performing \\(A\\) (contained in the set \\(m_i\\)),\n\\[\n\\Pr(i \\text{ adopts } A) = \\frac{\\sum_{j \\in m_i} f_j}{\\sum_{k \\in n_i} f_k}.\n\\]\nIn our example, only one neighbor installed residential solar with a fitness (i.e. wealth in this example) of 4, while the others have finess 1 and 2. Therefore, \\(\\Pr(1 \\text{ adopts } A) = \\frac{4}{7}\\).\n\n\n1.2.1.2 Frequency-biased learning\nIn frequency-biased learning there is no interaction partner or teacher chosen. The probability of adoption is only given by the relative frequency of each behavior. The general expression is\n\\[\n\\Pr(i \\text{ adopts } A) = \\frac{|m_i|}{|n_i|}.\n\\]\nIn our example, then, the probability of installing residential solar under frequency-biased learning is \\(\\frac{1}{3}\\).\n\n\n1.2.1.3 Contagion learning\nIn the contagion learning model, the focal agent’s (i.e., the learner’s) teacher (i.e., interaction partner) is chosen at random. Then, the learner adopts the teacher’s behavior with probability \\(\\alpha\\), the adoption rate. In this case, then, the probability that 1 adopts residential solar is\n\\[\n\\Pr(1 \\text{ adopts solar}) = \\alpha \\Pr(1 \\text{ selects 2 as teacher}) = \\alpha \\frac{1}{3}.\n\\]\nMore generally, for focal agent \\(i\\) with the set of neighbors \\(n_i\\) (\\(n_1 = \\{2, 3, 4\\}\\) in the example), where \\(m_i\\) is the set of neighbors who have adopted the adaptive behavior (\\(m_i = \\{2\\}\\) in the example). We call the adaptive behavior \\(A\\). The general probability of adoption in contagion learning is therefore\n\\[\n\\Pr(i \\text{ adopts } A) = \\frac{\\alpha |m_i|}{|n_i|},\n\\]\nwhere the \\(| \\cdot |\\) operator counts the number of elements in a set.\n\n\n1.2.1.4 Combinations of learning models\nThere is no reason different learning models cannot be combined. The software we will use in this class, socmod, provides flexibility to the user to define their own learning models. The simplest combination of the three learning models above is to add an adoption rate to either frequency- or success-biased learning. In this approach, one could call the behavior selected by the models above could be considered prospective or candidate behavior to learn, then is actually learned with probability \\(\\alpha\\).\nFor another potentially useful modification, \\(\\alpha\\) could be defined at the individual level, say \\(\\alpha_i\\), or for dyads (i.e., a pair of interacting individuals) , \\(\\alpha_{ij}\\), where \\(i\\) is still the focal agent learner, but we have added \\(j\\), representing the selected teacher.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#identity-and-influence",
    "href": "intro.html#identity-and-influence",
    "title": "1  Introduction",
    "section": "1.3 Identity and Influence",
    "text": "1.3 Identity and Influence\nGroup identity critically influences social learning. Neuroscience research demonstrates that our brains distinctly respond to individuals identified as part of our group (Cikara and Van Bavel 2014), as revealed through fMRI neural imaging (Figure 1.4). This ability likely evolved because when humans first emerged about two million years ago, it was much more important for survival to be able to rapidly identify whether someone was a friend or foe based on group markers. Although group membership can affect how we respond to information learned from others, group membership itself is quite plastic, meaning who belongs to which group can be rapidly reconfigured. For example, neural signals of race-based group perception was observed to be suppressed and overridden when individuals were in mixed-race groups created by experimenters that competed against other mixed-race groups in an psychological experimental task (Van Bavel, Packer, and Cunningham 2008).\n\n\n\n\n\n\nFigure 1.4: Figure 1 reorganized with original caption from Cikara and Van Bavel (2014)\n\n\n\nStudies further show that group identity can strongly influence behavioral choices. For instance, experimental evidence reveals people resist adopting beneficial behaviors if associated with opposing political identities (Ehret et al. 2022), emphasizing how identity can create substantial barriers to sustainability. This general effect of group membership interfering with learning is called outgroup aversion (Smaldino et al. 2017).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#social-networks-homophily-and-core-periphery-structure",
    "href": "intro.html#social-networks-homophily-and-core-periphery-structure",
    "title": "1  Introduction",
    "section": "1.4 Social networks, homophily, and core-periphery structure",
    "text": "1.4 Social networks, homophily, and core-periphery structure\nSocial structure can significantly impact behavioral diffusion, especially in core-periphery configurations. Core-periphery networks emerge as a response to risk and uncertainty, e.g., in food sharing networks (Ready and Power 2018), so they are hypothesized to also be important in climate change adaptation transmission networks (Jones, Ready, and Pisor 2021). Core-periphery networks can be created by setting appropriate group sizes and homophily levels in homophily network models (Turner et al. 2023) or specifying certain connectivity probabilities to the stochastic block matrix algorithm for creating structured random graphs (Rombach et al. 2014; Milzman and Moser 2023). Homophily is the measure of how much more likely an individual is to socially connect within their own group versus with a member of a different group. Homophily can range from -1 to +1, where -1 represents no within-group connections and only between-group connections (i.e., anti-homophily); 0 represents an equal probability of within- and between-group connections, and +1 represents only within-group connections. We will define homophily as either a global or group-level variable, though homophily could vary individually as well. There are two types of homophily:\n\nChoice Homophily: Individuals actively prefer interacting with similar others.\nInduced Homophily: Social interactions limited by historical or external conditions like geography, profession, birthplace, etc.\n\nThese structural elements can significantly limit the diffusion of sustainable practices from peripheries, like the mangrove management on smaller islands, to central cores. However, as colleagues and I have showed, this core-periphery structure, defined by moderately high majority-group homophily can actually promote the diffusion of adaptations, provided the adaptation is practiced by the minority group (Turner et al. 2023), as is the case for mangrove forest management or prescribed burns. Formal definitions of homophily and core-peripheriness will be given in the networks chapter.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#course-outline-in-the-context-of-sustainable-development",
    "href": "intro.html#course-outline-in-the-context-of-sustainable-development",
    "title": "1  Introduction",
    "section": "1.5 Course outline in the context of sustainable development",
    "text": "1.5 Course outline in the context of sustainable development\nThe agent-based modeling approach developed in this course provides a structured way to test the effectiveness of social interventions aimed at promoting sustainable behavior. By formalizing and testing our assumptions about social dynamics, agent-based modeling supports better design and evaluation of policies and programs aimed at driving real-world change. This deductive, experimental approach allows us to explore how cooperation, coordination, identity, homophily, and influence affect the likelihood that beneficial behaviors will spread. In the coming chapters and associated problem sets we will analyze social learning of behaviors and social influence of opinions in various contexts.\nThe goal is to build up a repertoire of agent-based modeling techniques for incorporating different assumptions about how social learning or influence work, whether group structure is important to these processes, and for modeling social network structure. This repertoire can then be applied to sustainability contexts of interest to understand how different sustainability intervention strategies, such as who should learn about sustainable adaptations first in an educational intervention or how best to assist stakeholder deliberations to reduce opinion polarization that can derail collective adaptation. To choose model components wisely requires an understanding of elements of sustainability, cognitive and social science, network science, and software engineering.\nThe UN Sustainable Development Goals help us focus and organize our work by providing concrete goals for evaluating progress towards sustainable development for all Figure 1.5. These goals include targets for institutional development that promotes basic conditions for human thriving (justice, equality, education, public health, and no poverty) so as to assemble and enable a critical mass of people to participate bringing about sustainable development. People cannot participate in sustainability if they suffer in poverty, from illness, or subjugation by authoritarians–all but the most zealous environmental defenders will fight on when these basic needs are unmet. Since progress has been slower than necessary.\nSustainability, then, has several different dimensions, all of which contribute to climate action and environmental protection. I have organized these goals into a coding system called the vIBE system: vibrant Institutions support Basic human needs of people who protect the Environment. All 17 goals and the organization system are illustrated in Figure 1.5. Organizing and connecting our work to has two benefits. First, it helps us identify which cognitive and social factors are at work in different sustainability foci. Second, it expands the corpus of existing research on which we draw to consolidate our social and cognitive theories of behavior change that we will apply to sustainability interventions.\n\n\n\n\n\n\nFigure 1.5: The 17 United Nations Sustainable Development Goals (SDGs) can be organized into groups for vibrant Institutions (Group I) that provide Basic needs (Group B) required for people to actively work towards Environmental and Ecological protection (Group E)–we dub this the vIBE coding of the sustainable development goals.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#computational-social-science-roots",
    "href": "intro.html#computational-social-science-roots",
    "title": "1  Introduction",
    "section": "1.6 Computational social science roots",
    "text": "1.6 Computational social science roots\nOne goal and theme of socmod is to avoid unneccesary theoretical commitments to either epidemiological forcing-style assumptions (e.g., using SI/SIS/SIR) or to population genetics (e.g., Kimura–Crow models) analyses that represent social learning as evolutionary selection. The agent-based social learning framework provided by socmod accommodates these or other various social behavior models. In the case of diffusion of adaptations, these formalisms share a common mathematical structure of birth–death processes.\nWe compare these modeling approaches in two ways: first, through their fixation dynamics under weak selection or forcing, and second, through how they each map to a birth–death framework. This is meant to situate users who think in either formalism to how they can map their domain knowledge onto socmod’s framework for agent-based models of social behavior.\n\n1.6.1 Contagion, selection, and social learning\nFixation dynamics arise when a type, trait, or state spreads through a finite population until it completely replaces alternatives. Across epidemiology, population genetics, and social learning, this process can often be formalized using birth–death models, where individuals probabilistically transition between types.\nThe general structure is:\n\\[\n\\frac{dp}{dt} = \\text{birth rate} \\times (1 - p) - \\text{death rate} \\times p\n\\]\nwhere \\(p(t)\\) is the frequency of the type of interest at time \\(t\\).\n\nBirth rate describes how often new instances of the type arise (e.g., infections, successful adoptions, reproductions).\nDeath rate describes how often the type is lost (e.g., recoveries, abandonment, replacement by competitors).\n\nIn biological contexts, these are referred to as birth–death processes. However, for social learning of adaptive sustainable behaviors, a more accurate description would be learning–unlearning processes: individuals can adopt and later abandon behaviors depending on social influences, network structure, and environmental feedback.\nBelief dynamics, which govern the spread and change of internal mental states rather than observable behaviors, differ substantially in mathematical structure. Nonetheless, belief dynamics can also exhibit asymptotic, closed-form approximations under appropriate assumptions.\nWe focus first on behavioral diffusion processes grounded in social learning. Belief dynamics and their distinct formal properties will be introduced and analyzed in the second part of this book.\nIn this section, we compare how fixation arises under weak selection or weak forcing in three domains: forcing models from epidemiology, population genetics models, and agent-based social learning models.\n\n\n1.6.2 Formal Models: Forcing, Genetic Drift, and Success Bias\nIn epidemiology, the spread of an infectious disease through a population can be captured by systems of ordinary differential equations (ODEs). For a simple SIS (Susceptible–Infected–Susceptible) model, the equations are:\n\\[\n\\frac{dS}{dt} = -\\beta S I + \\gamma I\n\\] \\[\n\\frac{dI}{dt} = \\beta S I - \\gamma I\n\\]\nwhere: - \\(S(t)\\) and \\(I(t)\\) are the proportions of susceptible and infected individuals at time \\(t\\), - \\(\\beta\\) is the transmission rate, - \\(\\gamma\\) is the recovery rate.\nFixation of the infection (i.e., the infected state reaching \\(I=1\\)) occurs when transmission outpaces recovery, roughly when \\(\\beta S &gt; \\gamma\\). In small populations, stochastic drift also matters, especially when \\(I\\) is small.\nIn population genetics, the probability of fixation of a new mutant allele can be approximated using Kimura and Crow’s theory. In the simplest form under weak selection:\n\\[\n\\text{Fixation probability} \\approx p_0 + s(1 - p_0)\n\\]\nwhere: - \\(p_0\\) is the initial frequency of the mutant allele, - \\(s\\) is the selection coefficient (small positive or negative).\nIn neutral drift (\\(s=0\\)), the fixation probability equals \\(p_0\\). When selection is weak but nonzero, the probability is shifted slightly toward the fitter allele.\nIn social learning models, especially those employing success-biased learning, the analogy to selection is direct. Agents are more likely to copy behaviors that have produced higher payoffs or success in the recent past. This introduces a selection-like bias in the replication of behaviors:\n\nDrift corresponds to random copying without regard to success.\nSelection corresponds to biased copying favoring higher-payoff behaviors.\n\nThus, success-biased social learning is mathematically analogous to weak selection in evolutionary models: both introduce a systematic force that, over time, increases the frequency of advantageous types.\n\n\n1.6.3 Fixation with Weak Selection or Forcing\n\n\n\n\n\n\n\n\n\nConcept\nForcing Models (Epidemiology)\nPopulation Genetics (Kimura–Crow)\nSocial Learning (socmod)\n\n\n\n\nEntities\nSusceptible/infected states\nAlleles at genetic loci\nBehaviors or traits in agents\n\n\nDynamics\nInfection spread vs. recovery\nReproduction with drift and weak selection\nSocial learning with drift and weak biases\n\n\nFixation driver\nTransmission \\(\\beta\\) overcoming recovery \\(\\gamma\\)\nDrift plus selection (fitness differences)\nDrift plus learning biases (e.g., success or frequency bias)\n\n\nFixation probability (neutral)\nEquals initial infection fraction\nEquals initial allele frequency \\(p_0\\)\nEquals initial behavior frequency\n\n\nFixation probability (with weak selection)\nInfection fixates if \\(\\beta &gt; \\gamma\\)\nApprox. \\(p_0 + s(1-p_0)\\) for small selection \\(s\\)\nBehavior slightly favored by payoff advantage\n\n\nTime to fixation\nRapid if \\(\\beta \\gg \\gamma\\); stochastic early otherwise\nSlow if drift dominates; scales with \\(N\\)\nFaster with strong bias; scales with network size\n\n\nRole of stochasticity\nImportant early, less so later\nDominant under weak selection\nDominant under weak learning biases\n\n\nModeling framework\nStochastic/deterministic ODEs (SIS, SIR) (Keeling and Rohani 2008; Anderson and May 1991)\nWright–Fisher, Moran, diffusion approximations (Crow and Kimura 1970; Kimura 1962)\nAgent-based simulations with probabilistic rules (Boyd and Richerson 1985; Rogers 2003)\n\n\n\n\nForcing models focus on infection and recovery dynamics.\nPopulation genetics tracks allele frequency changes via drift and selection.\nSocial learning models behavioral adoption via social influence and drift.\n\n\n\n1.6.4 Birth–Death Process Mapping\n\n\n\n\n\n\n\n\nSystem\nBirth event\nDeath event\n\n\n\n\nForcing Models (epidemiology, SIS/SIR)\nInfection (Susceptible \\(\\to\\) Infected)\nRecovery (Infected \\(\\to\\) Susceptible)\n\n\nPopulation Genetics (Kimura–Crow)\nAllele reproduction (fitness-dependent)\nAllele loss (death or replacement)\n\n\nSocial Learning (socmod)\nBehavior adoption (social copying or bias)\nBehavior loss or switching\n\n\n\nAll three systems feature: - Birth: growth of a type or trait. - Death: loss or replacement. - Drift and bias: stochastic fluctuations and directional forces.\n\n\n1.6.5 socmod framework for many models\nsocmod models, by tuning parameters such as success bias, frequency bias, transmission, and dropout rates, can replicate the core behaviors of both population genetics and epidemiology.\nKey parallels: - Strong success bias \\(\\leftrightarrow\\) strong selection. - Random copying \\(\\leftrightarrow\\) neutral drift. - Contagion learning \\(\\leftrightarrow\\) stochastic infection.\nThus, socmod models offer a flexible platform bridging epidemiology, evolutionary biology, and social dynamics.\n\n\n\n\nAiroldi, Edoardo M., and Nicholas A. Christakis. 2024. “Induction of social contagion for diverse outcomes in structured experiments in isolated villages.” Science 384 (6695). https://doi.org/10.1126/science.adi5147.\n\n\nAlongi, Daniel M. 2002. “Present state and future of the world’s mangrove forests.” Environmental Conservation 29 (3): 331–49. https://doi.org/10.1017/S0376892902000231.\n\n\nAnderson, R. M., and R. M. May. 1991. Infectious Diseases of Humans: Dynamics and Control. Oxford University Press.\n\n\nBoyd, R., and P. J. Richerson. 1985. Culture and the Evolutionary Process. University of Chicago Press.\n\n\nCikara, Mina, and Jay J. Van Bavel. 2014. “The Neuroscience of Intergroup Relations: An Integrative Review.” Perspectives on Psychological Science 9 (3): 245–74. https://doi.org/10.1177/1745691614527464.\n\n\nCrow, J. F., and M. Kimura. 1970. An Introduction to Population Genetics Theory. Harper; Row.\n\n\nDeffner, Dominik, Natalia Fedorova, Jeffrey Andrews, and Richard McElreath. 2024. “Bridging theory and data: A computational workflow for cultural evolution.” Proceedings of the National Academy of Sciences of the United States of America 121 (48): 1–11. https://doi.org/10.1073/pnas.2322887121.\n\n\nEhret, Sönke, Sara M. Constantino, Elke U. Weber, Charles Efferson, and Sonja Vogt. 2022. “Group identities can undermine social tipping after intervention.” Nature Human Behaviour. https://doi.org/10.1038/s41562-022-01440-5.\n\n\nEisenberg, Cristina, Christopher L. Anderson, Adam Collingwood, Robert Sissons, Christopher J. Dunn, Garrett W. Meigs, Dave E. Hibbs, et al. 2019. “Out of the Ashes: Ecological Resilience to Extreme Wildfire, Prescribed Burns, and Indigenous Burning in Ecosystems.” Frontiers in Ecology and Evolution 7 (November): 1–12. https://doi.org/10.3389/fevo.2019.00436.\n\n\nHenrich, Joseph. 2015. The secret of our success. Princeton University Press.\n\n\nJones, James Holland, Elspeth Ready, and Anne C. Pisor. 2021. “Want climate-change adaptation? Evolutionary theory can help.” American Journal of Human Biology 33 (4): 1–17. https://doi.org/10.1002/ajhb.23539.\n\n\nKeeling, M. J., and P. Rohani. 2008. Modeling Infectious Diseases in Humans and Animals. Princeton University Press.\n\n\nKimura, M. 1962. “On the Probability of Fixation of Mutant Genes in a Population.” Genetics 47 (6): 713–19.\n\n\nKolden, Crystal A. 2019. “We’re not doing enough prescribed fire in the western united states to mitigate wildfire risk.” Fire 2 (2): 1–10. https://doi.org/10.3390/fire2020030.\n\n\nMalekpour, Shirin, Cameron Allen, Ambuj Sagar, Imme Scholz, Åsa Persson, Jaime J. Miranda, Therese Bennich, et al. 2023. “What scientists need to do.” Nature 621 (September): 250–54.\n\n\nMcNamara, Karen E., Rachel Clissold, Ross Westoby, Annah E. Piggott-McKellar, Roselyn Kumar, Tahlia Clarke, Frances Namoumou, et al. 2020. “An assessment of community-based adaptation initiatives in the Pacific Islands.” Nature Climate Change 10 (7): 628–39. https://doi.org/10.1038/s41558-020-0813-1.\n\n\nMilzman, Jesse, and Cody Moser. 2023. “Decentralized core-periphery structure in social networks accelerates cultural innovation in agent-based model.” In Proc. Ofthe 22nd International Conference on Autonomous Agents and Multiagent Sys- Tems (AAMAS 2023). http://arxiv.org/abs/2302.12121.\n\n\nNalau, Johanna, Susanne Becken, Johanna Schliephack, Meg Parsons, Cilla Brown, and Brendan Mackey. 2018. “The role of indigenous and traditional knowledge in ecosystem-based adaptation: A review of the literature and case studies from the Pacific Islands.” Weather, Climate, and Society 10 (4): 851–65. https://doi.org/10.1175/WCAS-D-18-0032.1.\n\n\nPearson, Jasmine, Karen E. McNamara, and Patrick D. Nunn. 2020. iTaukei Ways of Knowing and Managing Mangroves for Ecosystem-Based Adaptation. Springer International Publishing. https://doi.org/10.1007/978-3-030-40552-6_6.\n\n\nPiggott-McKellar, Annah E, Patrick D Nunn, Karen E McNamara, and Seci T Sekinini. 2020. “Dam(n) Seawalls: A Case of Climate Change Maladaptation in Fiji.” In Managing Climate Change Adaptation in the Pacific Region, edited by W. Leal Filho, 69–84. Springer. https://doi.org/10.1007/978-3-030-40552-6.\n\n\nReady, Elspeth, and Eleanor A. Power. 2018. “Why wage earners hunt: Food sharing, social structure, and influence in an arctic mixed economy.” Current Anthropology 59 (1): 74–97. https://doi.org/10.1086/696018.\n\n\nRogers, E. M. 2003. Diffusion of Innovations. 5th ed. Free Press.\n\n\nRombach, M. Puck, Mason A. Porter, James H. Fowler, and Peter J. Mucha. 2014. “Core-periphery structure in networks.” SIAM Journal on Applied Mathematics 74 (1): 167–90. https://doi.org/10.1137/120881683.\n\n\nSmaldino, Paul E, Marco A Janssen, Vicken Hillis, Jenna Bednar, Paul E Smaldino, Marco A Janssen, Vicken Hillis, and Jenna Bednar. 2017. “Adoption as a social marker: Innovation diffusion with outgroup aversion.” The Journal of Mathematical Sociology 41 (1): 26–45. https://doi.org/10.1080/0022250X.2016.1250083.\n\n\nSwette, Briana, Lynn Huntsinger, and Eric F. Lambin. 2023. “Collaboration in a polarized context: lessons from public forest governance in the American West.” Ecology and Society 28 (1). https://doi.org/10.5751/ES-13958-280129.\n\n\nTurner, Matthew A., Alyson L. Singleton, Mallory J. Harris, Ian Harryman, Cesar Augusto Lopez, Ronan Forde Arthur, Caroline Muraida, and James Holland Jones. 2023. “Minority-group incubators and majority-group reservoirs support the diffusion of climate change adaptations.” Philosophical Transactions of the Royal Society B: Biological Sciences 378 (1889). https://doi.org/10.1098/rstb.2022.0401.\n\n\nUnited Nations. 2023. “Times of crisis, times of change: Science for accelerating transformations to sustainable development.” https://sdgs.un.org/sites/default/files/2023-09/FINAL GSDR 2023-Digital -110923_1.pdf.\n\n\nVan Bavel, Jay J, Dominic J Packer, and William A Cunningham. 2008. “The Neural Substrates of In-Group Bias.” Psychological Science 19 (11): 1131–39.\n\n\nWitt, Alexandra, Wataru Toyokawa, Kevin N. Lala, Wolfgang Gaissmaier, and Charley M. Wu. 2024. “Humans flexibly integrate social information despite interindividual differences in reward.” Proceedings of the National Academy of Sciences 121 (39). https://doi.org/10.1073/pnas.2404928121/-/DCSupplemental.Published.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "technical-intro.html",
    "href": "technical-intro.html",
    "title": "2  Techniques for socmod ABM development",
    "section": "",
    "text": "2.1 Data collection types in R\nThis chapte introduces agent-based modeling in socmod starting with basic functional and object-oriented programming in R. It therefore builds on an assumed knowledge of R basics which can be gained by studying, for example, Hands-On Programming with R or other basic R tutorial introductions.\nTo model social behavior it helps to have intuitive software tools grounded in an empirically-motivated, self-consistent scientific theory. socmod provides those tools, but to put it to best use it’s helpful to know how it works, especially for people used to using R in a data science context. Many of the same tools are transferable, especially declarative/functional programming, as is used and encouraged by the tidy approach in R for Data Science.\nTo create simulations that generate social behavior we have to go beyond tabular representations of the world to more complex representations of people and their interactions that can be measured. These measurements are recorded in a standard tabular format, e.g., CSV, which can then be analyzed using tidy/R for Data Science strategies.\nIn agent-based modeling, we create software representations of simulated people, i.e. agents, or other interacting entities, including the agents’ environment. Object-oriented programming is the natural choice for software design in this case because it provides a structure for defining custom objects like socially interacting agents. An object is one bit of data that could be a number or character type, but could also be something more complicated. In object-oriented programming we define custom classes that specify various data fields and function methods for maintaining and modifying the state of objects. The fields and methods of a class therefore are sets of related data and functions to represent things in the world.\nTo summarize, objects are a way to track and modify the state of different software entities. We can create simulations of real-world systems by defining custom object types called classes whose state and behaviors are modeled on relevant real-world features and behaviors.\nIn socmod, we define custom R objects for agent-based models of social behavior using the R6Class method that creates a new object type, i.e., a new class. We use tidy-style functional programming where helpful to represent model features and dynamics.\nIn the remainder of this chapter, I will first review variable assignment and data structures in R including vectors, lists, data.frames, and tibbles. We then review relevant topics in functional programming, then demonstrate how to create custom classes in R with the library R6. This tutorial then closes with a demonstration of a simple four-agent agent-based model of social behavior, kept simple to highlight the functional and object-oriented design patterns in socmod, representing Agent, an AgentBasedModel, and Trialclasses defined using the R6Class function.\nIn R, there is a hierarchy of data collection types that are necessary to know about for functional programming, which often involves applying a function across every element of a collection of data. Data collections include vectors, lists, data.frames, and tibbles, which we’ll cover here.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Techniques for socmod ABM development</span>"
    ]
  },
  {
    "objectID": "technical-intro.html#data-collection-types-in-r",
    "href": "technical-intro.html#data-collection-types-in-r",
    "title": "2  Techniques for socmod ABM development",
    "section": "",
    "text": "2.1.1 Collections of basic data types\nIn computer science, a collection is an abstract data type that organizes and stores instances of other data types. In R, the most basic data types are numbers (e.g., double or integer) and text, whose data type is character in R whether it’s a single character or several:\n\nprint(typeof('c'))\n\n[1] \"character\"\n\nprint(typeof(\"social science is kewl\"))\n\n[1] \"character\"\n\n\n\n\n2.1.2 Vectors\nR vectors are defined using the c() function, e.g., vec &lt;- c(0, 0, 1). The data type of all vector elements must be the same. This is enforced by R coercing data to different types, for example:\n\nprint(c(0, 0, 1))\n\n[1] 0 0 1\n\nprint(c(0, 0, \"yo\"))\n\n[1] \"0\"  \"0\"  \"yo\"\n\n\nWe index vectors using single square brackets, with R indexing starting from 1:\n\nvec &lt;- c(1, 2, 3, 4, 5) # equiv to vec &lt;- 1:5 or seq(1, 5)\nprint(vec[1])\n\n[1] 1\n\nprint(vec[length(vec)])\n\n[1] 5\n\n\n\n\n2.1.3 Lists\nIf one wants to keep elements of different types in a single collection, use the R list:\n\nl &lt;- list(0, 542, \"yo\")\nprint(l)\n\n[[1]]\n[1] 0\n\n[[2]]\n[1] 542\n\n[[3]]\n[1] \"yo\"\n\n\nNote the visual representation has changed on printout. We now need to use double-square brackets to index list elements themselves:\n\nprint(l[[3]])\n\n[1] \"yo\"\n\n\nIf we leave off one of the square brackets we effectively get a sub-list with just one element:\n\nprint(l[3])\n\n[[1]]\n[1] \"yo\"\n\n\nThis is useful if you want to create a new sub-list with more than one element:\n\nprint(l[c(2, 3)])\n\n[[1]]\n[1] 542\n\n[[2]]\n[1] \"yo\"\n\n\n\n\n2.1.4 Named lists\nNamed lists are the primary key-value store in R, just like dict in Python. It allows us to label entries of the list and access them using double square brackets with the character name or using the $ access operator:\n\nnamed_l &lt;- list(a = c(0, 5, 6), b = c(7, 8, 9))\nprint(named_l$a == named_l[[\"a\"]]) # compares element-by-element\n\n[1] TRUE TRUE TRUE\n\nprint(all(named_l$b == named_l[[\"b\"]]))\n\n[1] TRUE\n\n\n\n\n2.1.5 tibble (and data.frame)\nBoth the tibble and data.frame classes represent tabular data, meaning data that can be represented in table format, e.g., in comma- or tab-separated value format. There are some subtle differences listed below, but we’ll use tibble for representing our tables.\nTibbles are like fancy lists that have special properties that make data manipulation more efficient. The details of how this works aren’t super important at this point. The important thing to know is how one can initialize tibbles and access tibble columns similarly to lists, as shown in the following example:\n\ntbl &lt;- tibble::tibble(a = c(0, 5, 6), b = c(7, 8, 9))\nprint(tbl$a)\n\n[1] 0 5 6\n\nprint(tbl[[\"b\"]])\n\n[1] 7 8 9\n\n\nUsing tibbles ensures that data manipulation and analysis using the tidyverse will work as expected. For example, the tidyverse provides functions for analyzing different groups of data within a larger dataset. This is a common data analysis pattern called split-apply-combine, which in the tidyverse translates to group-by and summarise when using the dplyr library. For example, we can calculate the mean of measurements in “experimental” and “control” conditions in some fake data:\n\nobservations &lt;- tibble::tibble(\n  condition = c(\"experimental\", \"experimental\", \"control\", \"control\"),\n  measurement = c(13.5, 14.6, 3.4, 5.4)\n)\n\nmean_measurement_tbl &lt;- \n  observations %&gt;% \n  dplyr::group_by(condition) %&gt;% \n  dplyr::summarise(mean_measurement = mean(measurement))\n\nprint(mean_measurement_tbl)\n\n# A tibble: 2 × 2\n  condition    mean_measurement\n  &lt;chr&gt;                   &lt;dbl&gt;\n1 control                   4.4\n2 experimental             14.0\n\n\n\n\n2.1.6 Difference between data.frame and tibble\nThe tibble library provides a table data representation (also called tibble) that is a bit more flexible and intuitive than the R built-in data.frame. One reason I prefer tibbles is because traditional data.frames automatically convert strings to factors unless you tell them not to. Tibbles don’t, so you’re never surprised.\nColumn naming is also more flexible with tibbles. A data.frame requires syntactically valid R names, while tibbles can handle column names that include spaces or even non-standard characters. I often use this feature to use column names like Mean adaptation success that print nicely when used as labels in ggplot.\nFinally, tibble operations always return a tibble. For example, if df were a data.frame, the operation df[, 1] would return a vector by default. If it were a tibble it would return another tibble, making behavior more predictable in data analysis pipelines.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Techniques for socmod ABM development</span>"
    ]
  },
  {
    "objectID": "technical-intro.html#functional-programming",
    "href": "technical-intro.html#functional-programming",
    "title": "2  Techniques for socmod ABM development",
    "section": "2.2 Functional programming",
    "text": "2.2 Functional programming\nFunctional programming is especially useful for writing code that applies the same function to several inputs, but wants to leave it up to the user to specify exactly which function should be applied. In socmod we pass functions as arguments to other functions to specify how agents pick their interaction partners (i.e., teachers in a learning context) and how social learning works. Here are some simple examples demonstrating the key concepts and techniques of functional programming that could help with socmod programming.\n\n2.2.1 Higher-order functions: functions with function arguments\nIn R, and other programming languages supporting the functional style, one can treat functions like any other data and pass it as an argument to other functions. A function that accepts a function as an argument is called a higher-order function. Here is a simple example of a higher order function that takes some data as a first argument and applies the function f to that data twice, putting the result of each calculation in a two-element vector.\n\nrepeat_2_higher_order_func &lt;- function(data, f) {\n  return (c(f(data), f(data)))\n}\n\nBelow we call this higher order function by providing data=2 as the first argument and an anonymous function as the second argument, which can be written using \\(arg) { ...function body... } syntax:\n\n# \\(x) {...} is equivalent to function(x) { ... }; these are \n# anonymous functions.\n# Expecting to return c(4, 4)\nrepeat_2_higher_order_func(data = 2, f = \\(x) { return (x * 2) }) \n\n[1] 4 4\n\n\nThe above is the representation of a vector printed to screen, so we see that our expectations were matched.\n\nc(4, 4)\n\n[1] 4 4\n\n\n\n\n2.2.2 map: a common, useful higher-order function used often in socmod\nOne of the most useful and common higher-order functions is the map function. This function maps a function, denoted .f below, onto every element in a collection, denoted .x. This notation is from the map family of functions in the purrr library for tidy functional programming.\n\nlibrary(purrr)\n\nHere is an example of mapping an anonymous function that multiplies its input by 3 onto a vector with entries 2 and 8:\n\n# Now get we use map_vec that applies .f to every element of .x,\n# expecting the following to return a vector with elements 3*2 \n# and 3*8, i.e., c(6, 24).\npurrr::map_vec(.x = c(2, 8), .f = \\(x) { return(3 * x)})\n\n[1]  6 24\n\n\nIf we want to apply a function that takes two variables, the value and index of an element in a collection, we can use the imap family of functions as follows to return a vector that contains the original element multiplied by its place in the input vector:\n\ninput_vec &lt;- c(2, 5050, 6)\npurrr::imap_vec(input_vec, \\(el, idx) { return (idx * el) })\n\n[1]     2 10100    18",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Techniques for socmod ABM development</span>"
    ]
  },
  {
    "objectID": "technical-intro.html#custom-objects-r6-classes-in-socmod",
    "href": "technical-intro.html#custom-objects-r6-classes-in-socmod",
    "title": "2  Techniques for socmod ABM development",
    "section": "2.3 Custom objects: R6 classes in socmod",
    "text": "2.3 Custom objects: R6 classes in socmod\nClasses are ways to encapsulate diverse distinct, but related, processes, behaviors, data, attributes, and other types of information in a single object, i.e., a software representation of an instance of that entity. R6 is a library for creating our own custom classes that serve as an abstract template that specifies what distinguishes different types of objects/entities. Below we show first how to create a new agent, i.e., a new instance of the Agent class that is provided by socmod. After that is a fun example of how we can design a different social behavioral model, one of football/soccer matches. We write classes for players and teams and develop a play_match(team1, team2) function that pits two teams against each other.\n\n2.3.1 The Agent class in socmod\nBelow we create a new instance of the Agent class using the class constructor, the function written socmod::Agent$new() below that creates a new instance of the class.\n\na1 &lt;- socmod::Agent$new(1, name = \"Matt\", \n                        behavior = \"Adaptive\", \n                        fitness=1e6)\n\nWe can use the access operator, $ in R, to access the fields (i.e., attributes) of agent a1 like so:\n\nprint(a1$get_fitness())\n\n[1] 1e+06\n\nprint(a1$get_name())\n\n[1] \"Matt\"\n\nprint(a1$get_id())\n\n[1] 1\n\nprint(a1$get_behavior())\n\n[1] \"Adaptive\"\n\n\nWe can also use purrr::map functions over neighbors like so:\n\n# Assign neighbors to a1.\n\na1$set_neighbors(c(\n  socmod::Agent$new(id = 2, name = \"n2\"),\n  socmod::Agent$new(id = 3, name = \"n3\")\n))\n\n# Get the list of neighbors back to check it worked.\nneighbors &lt;- a1$get_neighbors()\nprint(class(neighbors))  # should be [1] \"Neighbors\" \"R6\"\n\n[1] \"Neighbors\" \"R6\"       \n\n# Neighbors$map() returns a list...\nneighbor_names &lt;- neighbors$map(\\(n) n$get_name())\nprint(neighbor_names)\n\n[[1]]\n[1] \"n2\"\n\n[[2]]\n[1] \"n3\"\n\n# ...use `unlist` to convert it to a vector:\nprint(unlist(neighbor_names))\n\n[1] \"n2\" \"n3\"\n\n\n\n\n2.3.2 Exercise: design and define classes from scratch\nIn class we started creating our model of a soccer player agent called Footballer, defined below. We ran out of time at the end of class to write methods for Footballer, i.e., ways that a football player could interact with the world, or that the world could act upon a soccer player. However we only had time to create a stub for two methods. A stub is a minimal chunk of code that does very little to nothing, but doesn’t get in the way by causing errors or anything like that. It enables us to document our plans for future development in the exact place where it would happen in the code.\nBelow we have stubs for score_goal and get_penalty methods for in-game behaviors. Other possibilities could include get_traded that would change its team and perhaps get_signed for cases where a player is a free agent.\n\nlibrary(R6)\n\nFootballer &lt;- R6Class(\"Footballer\",\n                        \n  public = list(\n    # Listing attributes as fields and \n    # setting to zero for their definition.\n    speed = 0.0,  # units of max km/h\n    accuracy = 0.0, # probability of scoring on a shot\n    market_value = 0.0, # \n    aggressiveness = 0.0, # units of penalties per match\n    team = \"\",\n    \n    initialize = function(speed = 15, \n                          accuracy = 0.2, market_value = 1e6, \n                          aggressiveness = 0.5, \n                          team = \"Free agent\") {\n      self$speed = speed\n      self$accuracy = accuracy\n      self$market_value = market_value\n      self$aggressiveness = aggressiveness\n      self$team = team\n    },\n    \n    # Stub two SoccerPlayer class methods...\n    # ...one for scoring a goal in a game...\n    scored_goal = function() {\n      return (ifelse(runif(1) &lt; self$accuracy, 1, 0))\n    },\n    # ...and one for getting a penalty in a game.\n    get_penalty_on_play = function() {\n      return (runif(1) &lt; self$aggressiveness)\n    }\n  )\n)\n\nTeam &lt;- R6Class(\"Team\",\n                \n  public = list(\n    name = \"\",\n    players = list(),\n    wins = 0,\n    ties = 0,\n    payroll = 0,\n    games_played = 0,\n    \n    # Team name is required, with players optionally specified.\n    initialize = function(name, players = list()) {\n\n      self$name = name\n\n      # Initialize players and payroll.\n      for (player in players) {\n        self$payroll &lt;- self$payroll + player$market_value\n        player$team &lt;- name\n      }\n\n      self$players &lt;- players\n    },\n    \n    # Add a player to the roster.\n    sign_player = function(player) {\n      # Add the player to the team.\n      self$players &lt;- c(players, player)\n      # Update payroll.\n      self$payroll &lt;- self$payroll + player$market_value\n      # Update the player's team to be this team's name.\n      player$team &lt;- self$name\n    }\n  )\n)\n\n\nfootballer &lt;- Footballer$new(accuracy = 0.5)\nfootballer$scored_goal()\n\n[1] 1\n\n# sum(purrr::map_vec(1:10, \\(.) p$scored_goal()))\n\nWe can define a function that simulates playing a football match where the team that scores more goals wins, or a tie if teams have the same score. We track penalties received but assume they don’t have an effect on the match outcome. We assume each player gets ten chances to score a goal. We leave it to the reader as an exercise to make use of the Footballer$get_penalty_on_play() method within the game to add penalties and consequences in the game (e.g., penalty kicks or something), and to use the Team$sign_player() add more players to each roster, which should increase the mean total scores in each game based on the simple way we’ve modeled gameplay in play_match.\n\n# Define a function that models a football match.\nplay_match &lt;- function(team1, team2) {\n  \n  # Walk over each player to see how many scores they get, \n  # summing to get the total team score. \n  team1_score &lt;- sum(\n    purrr::map_vec(\n      team1$players,\n      \\(player) {\n      # Calculate the total goals scored by the current player.\n        sum(purrr::map_vec(1:10, \\(.) player$scored_goal()))\n      }\n    ) \n  )\n  \n  team2_score &lt;- sum(\n    purrr::map_vec(\n      team2$players,\n      \\(player) {\n      # Calculate the total goals scored by the current player.\n        sum(purrr::map_vec(1:10, \\(.) player$scored_goal()))\n      }\n    ) \n  )\n  \n  if (team1_score == team2_score) {\n    team1$ties &lt;- team1$ties + 1\n    team2$ties &lt;- team2$ties + 1\n    cat(\"Tie game!\\n\")\n  } else if (team1_score &gt; team2_score) {\n    cat(team1$name, \"wins!!!\\n\")\n    team1$wins &lt;- team1$wins + 1\n  } else {\n    cat(team2$name, \"wins!!!\\n\")\n    team2$wins &lt;- team2$wins + 1\n  }\n  \n  cat(team1$name, \": \", team1_score, \"   \",  \n      team2$name, \": \", team2_score, \"\\n\")\n  \n  team1$games_played &lt;- team1$games_played + 1\n  team2$games_played &lt;- team2$games_played + 1\n}\n\nFirst we need teams, which we create and to which we assign players using the constructor, Team$new() in the code below.\n\n# Initialize two teams, Whales and Squirrels, each with two\n# players. All players have identical default attributes.\nwhales &lt;- Team$new(\n  name = \"Whales\", \n  players = c(Footballer$new(), Footballer$new())\n)\nsquirrels &lt;- Team$new(\n  name = \"Squirrels\", \n  players = c(Footballer$new(), Footballer$new())\n)\n\n# Play three matches.\nplay_match(whales, squirrels)\n\nWhales wins!!!\nWhales :  5     Squirrels :  4 \n\nplay_match(squirrels, whales)\n\nWhales wins!!!\nSquirrels :  5     Whales :  6 \n\nplay_match(squirrels, whales)\n\nWhales wins!!!\nSquirrels :  1     Whales :  2 \n\n# Print how many games each time won.\ncat(\"\\nAfter three games...\", \"\\nThe Whales have won\", \n    whales$wins, \"games and the Squirrels have won\", squirrels$wins)\n\n\nAfter three games... \nThe Whales have won 3 games and the Squirrels have won 0",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Techniques for socmod ABM development</span>"
    ]
  },
  {
    "objectID": "technical-intro.html#agent-based-models-of-social-behavior",
    "href": "technical-intro.html#agent-based-models-of-social-behavior",
    "title": "2  Techniques for socmod ABM development",
    "section": "2.4 Agent-based models of social behavior",
    "text": "2.4 Agent-based models of social behavior\nHere we develop our first agent-based models of social behavior. We’ll start small, with the following four-household network of solar panel electrification using only success-biased learning (Figure 2.1). Then we’ll do a detailed comparison of different social learning strategies with different parameterizations.\n\n\n\n\n\n\nFigure 2.1: Example social network and sustainable adaptation diffusion problem.\n\n\n\nIn the example, agent 2 has adopted rooftop solar. It has some adaptive fitness, which can be thought of as the financial gain from adopting a sustainable, adaptive behavior. We can directly create the social network using igraph::make_graph() then set it as the model’s social network, along with setting the learning strategy to be contagion learning.\nThe adoption_rate parameter specifies how likely another agent is to adopt the adaptive behavior when exposed to it. The drop_rate is how likely an agent doing the adaptive behavior is to stop doing it and revert to the non-adaptive behavior.\n\n2.4.1 Example 1: Time series of adaptation diffusion\n\nadoption_rate = 0.8\n \n# Run model with \ng &lt;- igraph::make_graph(~ 1-2, 1-3, 1-4, 3-2)\nmps &lt;- make_model_parameters(\n  contagion_learning_strategy, graph = g, adoption_rate = 0.8, drop_rate = 0.1\n)\ncabm &lt;- make_abm(mps); \ncabm$get_agent(2)$set_behavior(\"Adaptive\"); \ntrial &lt;- run_trial(cabm, stop = fixated)\nplot_adoption(trial, tracked_behaviors = c(\"Legacy\", \"Adaptive\"))\n\n\n\n\n\n\n\n\n\n# Same, but now call the adaptive behavior \"Baglowie\" instead of \"Adaptive\".\ng &lt;- igraph::make_graph(~ 1-2, 1-3, 1-4, 3-2)\nmps &lt;- make_model_parameters(\n  contagion_learning_strategy, graph = g, adoption_rate = 0.8, drop_rate = 0.1\n)\n\ncabm &lt;- make_abm(mps)\ncabm$get_agent(2)$set_behavior(\"Baglowie\"); \n\ntrial &lt;- run_trial(cabm, stop = fixated, adaptive_behavior = \"Baglowie\")\nplot_adoption(trial, tracked_behaviors = c(\"Legacy\", \"Baglowie\"))\n\n\n\n\n\n\n\n\n\n\n2.4.2 Example: comparison of learning strategies and parameters\nAgent-based models in socmod are composed of sub-models of cognition and social behavior and social networks. One component of agent cognition is its social learning strategy. Three social learning strategies are included in socmod: success-biased, frequency-biased, and contagion learning strategies see ABM course notes for more details.\nHere we show how to compare the three learning strategies across different learning parameters. One parameter we systematically vary affects only success-biased learning, and the other we systematically vary affects only contagion learning. We will design computational experiments to understand their effects, and overall differences between the three learning strategies.\n\n# Load ggplot2 to avoid writing it during plotting below.\nlibrary(ggplot2)\n# Model generation function used in both computational experiments below.\ngen &lt;- function(model_parameter_row) {\n  \n  # Extract adaptive_fitness to create agents.\n  adaptive_fitness &lt;- model_parameter_row$adaptive_fitness\n  \n  agent_1 &lt;- socmod::Agent$new(1, behavior = \"Legacy\", \n                               fitness = 1.0, name = \"a1\")\n  agent_2 &lt;- socmod::Agent$new(2, behavior = \"Adaptive\", \n                               fitness = adaptive_fitness, name = \"a2\")\n  agent_3 &lt;- socmod::Agent$new(3, behavior = \"Legacy\", \n                               fitness = 1.0, name = \"a3\")\n  agent_4 &lt;- socmod::Agent$new(4, behavior = \"Legacy\", \n                               fitness = 1.0, name = \"a4\")\n  \n  agents &lt;- list(agent_1, agent_2, agent_3, agent_4)\n  graph &lt;- igraph::make_graph(~ 1-2, 1-3, 1-4, 3-2)\n  \n  # Extract other necessary model parameters.\n  learning_strategy &lt;- model_parameter_row$learning_strategy\n  drop_rate &lt;- model_parameter_row$drop_rate\n  adoption_rate &lt;- model_parameter_row$adoption_rate\n  \n  # Make ModelParameters to encapsulate this model's parameters.\n  model_parameters &lt;- socmod::make_model_parameters(\n    learning_strategy, graph, adaptive_fitness = adaptive_fitness, \n    adoption_rate = adoption_rate, drop_rate = drop_rate\n  )\n  \n  return (\n    socmod::make_abm(\n      model_parameters,\n      agents = agents\n    )\n  )\n}\n\n\n2.4.2.1 Experiment over adaptive fitness values\n\n# Run the adaptive fitness trials if there is not already a variable\n# name for it in the current environment. Change n_trials_per_param to\n# a small number like 2-20 for development purposes.\nif (!(\"trials_adaptive_fitness\" %in% ls(all.names = TRUE))) {\n  trials_adaptive_fitness &lt;- socmod::run_trials(\n    gen, \n    n_trials_per_param = 100,  # change to 2-20 for shorter runs\n    stop = socmod::fixated, \n    syncfile = \"trials-adaptive_fitness.RData\",\n    # overwrite = TRUE,\n    learning_strategy = c(socmod::success_bias_learning_strategy,\n                          socmod::frequency_bias_learning_strategy,\n                          socmod::contagion_learning_strategy),\n    adaptive_fitness = seq(0.8, 2.4, 0.2),\n    adoption_rate = 0.6,\n    drop_rate = 0.2\n  )\n}\n\ntrials_summary &lt;- socmod::summarise_by_parameters(\n  trials_adaptive_fitness, c(\"learning_strategy\", \"adaptive_fitness\")\n)\n\ntrials_success_rate &lt;- dplyr::filter(trials_summary, Measure == \"success_rate\")\n\nNow plot…\n\np &lt;- ggplot(trials_success_rate, \n              aes(x=adaptive_fitness, y=Value, \n                  color=learning_strategy)\n) +\n  geom_line(linewidth=1.0) + geom_point(size=2.15) +\n  ggsci::scale_color_aaas() + ggsci::scale_fill_aaas() +\n  xlab(\"Adaptive fitness\") + ylab(\"Success rate\") +\n  scale_x_continuous(breaks = sort(\n    unique(trials_summary$adaptive_fitness)\n  )) +\n  theme_classic(base_size=14) +\n  ylim(0, 1.0) +\n  guides(color = guide_legend(title = \"Learning strategy\")) +\n  ggtitle(\"Adoption rate = 0.6, drop rate = 0.2\")\n\nggsave(\"adaptive_fitness_experiment.png\", p, \n       width = 5, height = 3)\n\n\n\n\nExample computational experiment testing effect of adaptive fitness on success rate across the three learning strategies.\n\n\n\n\n2.4.2.2 Experiment over adoption rate values\n\nif (!(\"trials_adoption\" %in% ls(all.names = TRUE))) {\n  trials_adoption &lt;- socmod::run_trials(\n    gen,\n    n_trials_per_param = 100,\n    stop = socmod::fixated, \n    syncfile = \"trials-adoption-rate.RData\",\n    overwrite = TRUE,\n    learning_strategy = c(socmod::success_bias_learning_strategy,\n                          socmod::frequency_bias_learning_strategy,\n                          socmod::contagion_learning_strategy),\n    adaptive_fitness = 1.4,\n    adoption_rate = c(0.05, 0.2, 0.4, 0.6, 0.8, 1.0),\n    drop_rate = 0.2\n  )\n}\ntrials_summary &lt;- socmod::summarise_by_parameters(\n  trials_adoption, c(\"learning_strategy\", \"adoption_rate\")\n)\n\ntrials_success_rate &lt;- dplyr::filter(\n  trials_summary, Measure == \"success_rate\"\n)\n\n\np &lt;- ggplot(trials_success_rate, \n            aes(x=adoption_rate, y=Value, color=learning_strategy)) +\n  geom_line(linewidth=1.0) + geom_point(size=2.15) +\n  ggsci::scale_color_aaas() + ggsci::scale_fill_aaas() +\n  xlab(\"Adoption rate\") + ylab(\"Success rate\") +\n  scale_x_continuous(breaks = sort(unique(trials_summary$adoption_rate))) +\n  theme_classic(base_size=14) +\n  ylim(0, 1.0) +\n  guides(color = guide_legend(title = \"Learning strategy\")) +\n  ggtitle(\"Adaptive fitness = 1.4, drop rate = 0.2\")\n\nggsave(\"adoption_rate_experiment.png\", \n       p, width=5, height=3)\n\n\n\n\nExample computational experiment testing effect of adoption rate on success rate across the three learning strategies.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Techniques for socmod ABM development</span>"
    ]
  },
  {
    "objectID": "diffusion.html",
    "href": "diffusion.html",
    "title": "Diffusion",
    "section": "",
    "text": "From whom and how we learn are essential components in explaining the puzzles of diffusion and belief change that underlie the transition to more sustainable practices. In this section we will introduce models of social behavior across different agent-based model configurations. The first chapter in this section introduces a general model of the diffusion of adaptations. Next, we show how models of cooperation can help us understand and predict outcomes in environmental management problems that require stakeholders to do the same behavior, using cooperation with groundwater usage limit laws within a water district as a prototypical example. Next we will present a related behavioral puzzle, that of why certain social norms like gender norms generate inequity and inequality, and point to how modeling social behavior can help us identify potential strategies for reaching more equitable equilibriums.",
    "crumbs": [
      "Diffusion"
    ]
  },
  {
    "objectID": "diffusion-intro.html",
    "href": "diffusion-intro.html",
    "title": "3  Diffusion",
    "section": "",
    "text": "3.1 Primer on interventions\nIn the context of sustainability and climate adaptation, behavior change often depends not only on individual decisions but also on the social networks through which information and behaviors spread. This chapter examines how the structure of social networks influences the diffusion of adaptations—behaviors or practices that help people adjust to new risks or environmental conditions.",
    "crumbs": [
      "Diffusion",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Diffusion</span>"
    ]
  },
  {
    "objectID": "diffusion-intro.html#primer-on-interventions",
    "href": "diffusion-intro.html#primer-on-interventions",
    "title": "3  Diffusion",
    "section": "",
    "text": "Recall that a sustainability intervention is an effort to promote some sustainable behavior or set of behaviors through education, training, or other means.\nIn order to simulate interventions, we must develop a sub-model for interventions, starting with classification.\n\nOur models of interventions will not be totally disconnected from models of the social systems themselves. Intervention models will specify the expected mode of transmission hypothesized to be most important for the design of the intervention.\nIntervention models should specify the outcome variable. For now, we will use the simplest version of outcomes included by default in socmod agent-based model output.",
    "crumbs": [
      "Diffusion",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Diffusion</span>"
    ]
  },
  {
    "objectID": "diffusion-intro.html#comparing-seeding-strategies-for-interventions",
    "href": "diffusion-intro.html#comparing-seeding-strategies-for-interventions",
    "title": "3  Diffusion",
    "section": "3.2 Comparing seeding strategies for interventions",
    "text": "3.2 Comparing seeding strategies for interventions\n\n3.2.1 Motivation\nWe begin with a concrete example: health behavior interventions in rural Honduran villages. In a study by Aral and Christakis, the researchers used detailed network data to test whether targeting well-connected individuals could increase the spread of health-promoting behaviors. The intervention succeeded not because it directly reached everyone, but because the network structure amplified its effects.\nThis example also serves as the foundation for an agent-based modeling assignment in which we will explain how computational experiments help us understand and predict the effect of different seeding and other intervention strategies.\nWe will close by contrasting seeding strategies that ignore social structure, as in Airoldi and Christakis (2024), with those that leverage social structure, like Turner et al. (2023).\n\n\n3.2.2 Network models and structure\nTo understand why structure matters, we explore a series of increasingly complex network models. We begin with deterministic models:\n\nRing networks, where each node is connected to a fixed number of neighbors.\nComplete networks, where every node is connected to every other node.\n\nThese help us isolate basic features like clustering and distance. We then turn to stochastic models:\n\nErdős–Rényi random networks, where links are created with fixed probability.\nWatts–Strogatz small-world networks, which combine high local clustering with occasional long-range ties.\n\nThe small-world model captures key features of real-world social networks: short average path lengths and local clustering. Examples from the original Watts and Strogatz paper—such as the U.S. power grid and the C. elegans neural network—illustrate how widespread these features are.\nAn unintuitive feature of many social networks is the friendship paradox: on average, your friends have more friends than you do. This emerges because well-connected individuals are more likely to appear in others’ networks. It affects who sees new behaviors early, who is most influential, and how we interpret network data. We include a visualization to illustrate this dynamic and emphasize the importance of precise language.\n\n\n3.2.3 From structure to simulation\nAgent-based models help us represent complexity by formalizing how cognition and social structure interact. Each component is modeled separately. Cognition refers to the processes agents use to evaluate and adopt behaviors—drawing on existing knowledge, experience, and social feedback. Social structure refers to constraints on who interacts with whom, shaped by acquaintanceship, geography, institutions, and chance. We model social structure as a network: a graph where nodes represent individuals and edges represent relationships through which information or influence can flow.\nWe design our simulations to evaluate different intervention strategies based on cognitive factors we deem most important, with social structure that is “good enough” for representing a real-world system. by vary which agents start with a given behavior or belief, a process often called seeding. For example, in a diffusion model, we might seed a behavior with the most connected individuals, a randomly selected group, or individuals located in a particular community. These differences allow us to explore how network structure interacts with initial conditions to shape diffusion outcomes—helping us identify strategies that are more robust, equitable, or efficient.",
    "crumbs": [
      "Diffusion",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Diffusion</span>"
    ]
  },
  {
    "objectID": "diffusion-intro.html#the-general-diffusion-model",
    "href": "diffusion-intro.html#the-general-diffusion-model",
    "title": "3  Diffusion",
    "section": "3.3 The general diffusion model",
    "text": "3.3 The general diffusion model\n\nCognition: how agents evaluate new behaviors;\nSocial behavior: how agents learn from others and adopt behaviors;\nNetwork structure: who interacts with whom.\n\nThese components are modular, allowing us to isolate the effects of structure while holding behavior constant.\nMODEL SKETCH HERE OF GENERAL DIFFUSION MODEL\n\nBehavior choice and learning\nGroup and social structure\nOutcome measure: simulated success rate\n\nThis flexible framework will carry through the rest of the course. In the next section, we extend this model to explore how homophily, asymmetry, and structural inequality affect adaptation outcomes.",
    "crumbs": [
      "Diffusion",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Diffusion</span>"
    ]
  },
  {
    "objectID": "diffusion-intro.html#network-structure-patterns-that-shape-and-constrain-adaptation",
    "href": "diffusion-intro.html#network-structure-patterns-that-shape-and-constrain-adaptation",
    "title": "3  Diffusion",
    "section": "3.4 Network structure patterns that shape and constrain adaptation",
    "text": "3.4 Network structure patterns that shape and constrain adaptation\n\n3.4.1 The good and the bad of social structure and long-range ties\n\n\n3.4.2 Homophily: choice and induced\nHomophily is the tendency for similar individuals to associate. We distinguish two forms:\n\nChoice homophily, where individuals actively prefer similar partners;\nInduced homophily, where external constraints (e.g., institutions, geography) create segregation even without conscious preference.\n\nTwo empirical illustrations:\n\nAn analysis of remote-work-eligible occupations shows clustering by education, income, and race.\nA study of minority students in a mostly white MBA program finds that homophily can foster solidarity and resilience.\n\n![Placeholder: Plot that I created based on that data. ]\nThese examples show that homophily can inhibit or support adaptation, depending on the context.\nWe also discuss experimental results from Centola (2010, 2011), which show that homophilous networks can outperform random ones in spreading health behaviors—especially when reinforcement and social learning are important.\n\n\n3.4.3 Asymmetric homophily and diffusion\nIn some cases, homophily is asymmetric. One group (often the minority) is more exposed to the other than vice versa. In the “Minority Incubator, Majority Reservoir” model, this asymmetry allows minority-originating adaptations to diffuse outward more effectively.\nThis structural asymmetry isn’t necessarily intentional—it can emerge from how connections are formed. Yet it has real implications for diffusion, visibility, and adaptation speed.\n\n\n3.4.4 Core-periphery structure\nIn a core-periphery network, a dense core of well-connected individuals is surrounded by a sparsely connected periphery. This structure supports fast diffusion through the core but may limit peripheral influence.\nThe South Pacific Island case provides an example: core-periphery organization enabled stable adaptation strategies under conditions of uncertainty and risk. These designs may emerge deliberately or organically.\n\n\n3.4.5 When ties break: cumulative loss\nTo illustrate the consequences of broken connections, we turn to Henrich’s study of tool diversity in Oceania. When long-range maritime ties between islands broke down, isolated communities lost complex technologies.\nThis example highlights how network fragmentation can halt or reverse cumulative cultural evolution—a key dynamic in adaptation and innovation.\n\n\n3.4.6 Modeling implications\nUsing the same agent-based model, we simulate diffusion on homophilous and core-periphery networks. Holding cognition and social behavior constant, we find:\n\nSome structures accelerate diffusion;\nSome amplify inequality in who adopts adaptations;\nSome slow or block spread entirely.\n\nThese outcomes underscore the importance of network design in policy, development, and sustainability work.\n\n\n3.4.7 Conclusion\nSocial networks don’t just transmit information—they shape who hears what, when, and from whom. Homophily and core-periphery structures are not marginal—they are central to how behaviors spread, how inequality persists, and how sustainability strategies succeed or fail.\nIn the next chapter and lecture, we extend this framework to include identity, polarization, and the role of group norms. These additional dynamics interact with the structures introduced here—and complicate efforts to promote coordination, learning, or fairness across diverse populations.\n\n\n\n\nAiroldi, Edoardo M., and Nicholas A. Christakis. 2024. “Induction of social contagion for diverse outcomes in structured experiments in isolated villages.” Science 384 (6695). https://doi.org/10.1126/science.adi5147.\n\n\nTurner, Matthew A., Alyson L. Singleton, Mallory J. Harris, Ian Harryman, Cesar Augusto Lopez, Ronan Forde Arthur, Caroline Muraida, and James Holland Jones. 2023. “Minority-group incubators and majority-group reservoirs support the diffusion of climate change adaptations.” Philosophical Transactions of the Royal Society B: Biological Sciences 378 (1889). https://doi.org/10.1098/rstb.2022.0401.",
    "crumbs": [
      "Diffusion",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Diffusion</span>"
    ]
  },
  {
    "objectID": "cooperation.html",
    "href": "cooperation.html",
    "title": "4  Cooperation",
    "section": "",
    "text": "Coming soon!",
    "crumbs": [
      "Diffusion",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Cooperation</span>"
    ]
  },
  {
    "objectID": "coordination.html",
    "href": "coordination.html",
    "title": "5  Coordination",
    "section": "",
    "text": "Coming soon!",
    "crumbs": [
      "Diffusion",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Coordination</span>"
    ]
  },
  {
    "objectID": "beyond-diffusion.html",
    "href": "beyond-diffusion.html",
    "title": "Beyond diffusion",
    "section": "",
    "text": "Choosing what to do is not just defined by payoffs, social structure and a single social learning strategy, as we modeled it in the previous chapters on diffusion. In this part of the notes we expand the scope of our social behavior theory to include more features: opinions and polarization, uncertainty and its effect on social learning, and a more nuanced cognitive learning model called reinforcement learning.\nOpinions (aka beliefs) shape our expectations about the benefits of different behaviors and our openness to learn from others, which in some contexts depends on how similar interaction partners are to one another.\n**Environmental uncertainty can reduce, remove, or even reverse the benefits of social learning if environmental variability is unpredictable. If the environment is unpredictable, socially-learned information could become outdated before it is learned, meaning a previously adaptive or sustainable behavior could have become maladptive or unsustainable with the passing of time. For example, monocrop agriculture that tills the ground every season may be less economical and sustainable than it once was given that climate catastrophes occur more frequently, but with unpredictable timing.\nModels that flexibly integrate information to update behavioral outcome expectations that guide behavior are called reinforcement learning models. We humans have an extensive repertoire of genetic cognitive adaptations for dealing with this sort of uncertainty. We update our expectations behavioral benefits based on the stream of information we experience in the form of learning from others while accounting for discrepencies between their personal contexts and ours (Witt et al. 2024). Humans are no slaves to socially-learned information, of course, so these models get us one step closer to more realistic social learning.\n\n\n\n\nWitt, Alexandra, Wataru Toyokawa, Kevin N. Lala, Wolfgang Gaissmaier, and Charley M. Wu. 2024. “Humans flexibly integrate social information despite interindividual differences in reward.” Proceedings of the National Academy of Sciences 121 (39). https://doi.org/10.1073/pnas.2404928121/-/DCSupplemental.Published.",
    "crumbs": [
      "Beyond diffusion"
    ]
  },
  {
    "objectID": "polarization.html",
    "href": "polarization.html",
    "title": "6  Polarization",
    "section": "",
    "text": "Coming soon!",
    "crumbs": [
      "Beyond diffusion",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Polarization</span>"
    ]
  },
  {
    "objectID": "uncertainty.html",
    "href": "uncertainty.html",
    "title": "7  Uncertainty",
    "section": "",
    "text": "Coming soon!",
    "crumbs": [
      "Beyond diffusion",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Uncertainty</span>"
    ]
  },
  {
    "objectID": "rl-agents.html",
    "href": "rl-agents.html",
    "title": "8  Reinforcement learning",
    "section": "",
    "text": "Coming soon!",
    "crumbs": [
      "Beyond diffusion",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Reinforcement learning</span>"
    ]
  },
  {
    "objectID": "manual.html",
    "href": "manual.html",
    "title": "Manual",
    "section": "",
    "text": "Techniques for doing ABM for sustainability.",
    "crumbs": [
      "Manual"
    ]
  },
  {
    "objectID": "writing.html",
    "href": "writing.html",
    "title": "9  Writing and project development",
    "section": "",
    "text": "It is a great feeling to close out one stage of a research project by writing in careful detail what we found, how we found it, and why it matters. But one of the most overwhelming challenges for me as a researcher, and I believe many others, is to write linear, logical, and likable research papers. One secret I’ve learned only recently is that the “writing” starts at the very beginning as one is developing a new project. This doesn’t mean that the ideas, motivations, and plan for research projects don’t change as the project goes from idea to finished product. But there must be sufficient justification and logic underlying a project’s motivation and implementation plan. For a while I’ve been familiar with the saying “great writing means great editing”, but until recently I didn’t understand that that means one must constantly be producing content (code or prose, figures, tables, etc.) and revising, reworking, recombining, and reevaluating our research products.\nGood scientific writing contextualizes our research questions and goals by introducing existing problems and solutions in a linear, logical way. The methods, results, and analyses are presented in sufficient detail so the reader can re-produce the model and analysis. Scientific results themselves must be contextualized them in terms of our research questions and explains why the model outcomes emerged as they did. Good writing finishes with a review of the findings, the model or methods that produced them, the research questions that motivated the study, the impact of the findings for the research questions and more broadly for social behavior/sustainability, for social behavioral sciences, and even for our general understanding of the universe, as appropriate.\nScientific papers share a structure that we will use as a template so one need not start from scratch, called the IMAD (or IMRaD) structure. These acronyms stand for the major section headings of research papers corresponding to the major logical divisions of the content. IMAD stands for Introduction, Model, Analysis, and Discussion, and IMRaD stands for Introduction, Methods, Results, and Discussion.\nMore details on all this soon.",
    "crumbs": [
      "Manual",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Writing and project development</span>"
    ]
  },
  {
    "objectID": "abm.html",
    "href": "abm.html",
    "title": "10  Programming agent-based model analyses",
    "section": "",
    "text": "In this Manual chapter we will mostly ignore the theoretical motivations for doing agent-based modeling to focus on developing the technical skills and techniques required to efficiently develop analyses of agent-based model. This is the development cycle, i.e., the process for developing and analyzing agent-based models.\n\nSketch it out: Write a brief justification and documentation explaining the model. A simple “box and arrow” diagram or table of model variables can be a great help to stay focused when writing code to implement the model. Specify which learning strategies, social networks, initial conditions, stopping conditions, or anything else that will need to decide before you write the code to implement your model.\nFirst code draft: Program the model in computer code. Start small. Develop a simplified version of the model first if your idea seems complicated. Use a small population size and inspect whether the model dynamics . Prototype the analyses, too, creating time series plots for a range of one (or maybe two) of the hypothized-most-important, explanatory input model parameters or initial conditions, holding other explanatory variables constant to one or a few spot-test values.\nCode review and refactoring: As you program you will likely need to revise your code just as you would revise prose, writing multiple drafts to get the meaning right and clarify your ideas as much as possible. Professional software developers call this process refactoring. As you model the process you’re interested in you get new insights about it, which will make you want to change the model from what you started with. This is fine! This is refactoring. At this point it is good to experiment, prototype, and tweak until you are sure the model address the problem of interest. Note that through the practice of modeling, the problem statement also gets sharpened since modeling forces us to specify and thereby clarify our theoretical explanations. Prototype all results by analyzing a relatively small number of trials (e.g., 5-20) for all (or nearly all) the input variable values to be tested in the full analysis.\nWrite a draft results section with the preliminary results",
    "crumbs": [
      "Manual",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Programming agent-based model analyses</span>"
    ]
  },
  {
    "objectID": "hpc.html",
    "href": "hpc.html",
    "title": "11  High-performance computing",
    "section": "",
    "text": "Coming soon!",
    "crumbs": [
      "Manual",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>High-performance computing</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Airoldi, Edoardo M., and Nicholas A. Christakis. 2024. “Induction of social contagion for diverse outcomes in\nstructured experiments in isolated villages.”\nScience 384 (6695). https://doi.org/10.1126/science.adi5147.\n\n\nAlongi, Daniel M. 2002. “Present state and\nfuture of the world’s mangrove forests.” Environmental\nConservation 29 (3): 331–49. https://doi.org/10.1017/S0376892902000231.\n\n\nAnderson, R. M., and R. M. May. 1991. Infectious Diseases of Humans:\nDynamics and Control. Oxford University Press.\n\n\nBoyd, R., and P. J. Richerson. 1985. Culture and the Evolutionary\nProcess. University of Chicago Press.\n\n\nCikara, Mina, and Jay J. Van Bavel. 2014. “The Neuroscience of Intergroup Relations: An Integrative\nReview.” Perspectives on Psychological Science 9\n(3): 245–74. https://doi.org/10.1177/1745691614527464.\n\n\nCrow, J. F., and M. Kimura. 1970. An Introduction to Population\nGenetics Theory. Harper; Row.\n\n\nDeffner, Dominik, Natalia Fedorova, Jeffrey Andrews, and Richard\nMcElreath. 2024. “Bridging theory and data: A\ncomputational workflow for cultural evolution.”\nProceedings of the National Academy of Sciences of the United States\nof America 121 (48): 1–11. https://doi.org/10.1073/pnas.2322887121.\n\n\nEhret, Sönke, Sara M. Constantino, Elke U. Weber, Charles Efferson, and\nSonja Vogt. 2022. “Group identities can\nundermine social tipping after intervention.” Nature\nHuman Behaviour. https://doi.org/10.1038/s41562-022-01440-5.\n\n\nEisenberg, Cristina, Christopher L. Anderson, Adam Collingwood, Robert\nSissons, Christopher J. Dunn, Garrett W. Meigs, Dave E. Hibbs, et al.\n2019. “Out of the Ashes: Ecological\nResilience to Extreme Wildfire, Prescribed Burns, and Indigenous Burning\nin Ecosystems.” Frontiers in Ecology and\nEvolution 7 (November): 1–12. https://doi.org/10.3389/fevo.2019.00436.\n\n\nHenrich, Joseph. 2015. The secret of our\nsuccess. Princeton University Press.\n\n\nJones, James Holland, Elspeth Ready, and Anne C. Pisor. 2021.\n“Want climate-change adaptation? Evolutionary\ntheory can help.” American Journal of Human\nBiology 33 (4): 1–17. https://doi.org/10.1002/ajhb.23539.\n\n\nKeeling, M. J., and P. Rohani. 2008. Modeling Infectious Diseases in\nHumans and Animals. Princeton University Press.\n\n\nKimura, M. 1962. “On the Probability of Fixation of Mutant Genes\nin a Population.” Genetics 47 (6): 713–19.\n\n\nKolden, Crystal A. 2019. “We’re not doing\nenough prescribed fire in the western united states to mitigate wildfire\nrisk.” Fire 2 (2): 1–10. https://doi.org/10.3390/fire2020030.\n\n\nMalekpour, Shirin, Cameron Allen, Ambuj Sagar, Imme Scholz, Åsa Persson,\nJaime J. Miranda, Therese Bennich, et al. 2023. “What scientists need to do.”\nNature 621 (September): 250–54.\n\n\nMcNamara, Karen E., Rachel Clissold, Ross Westoby, Annah E.\nPiggott-McKellar, Roselyn Kumar, Tahlia Clarke, Frances Namoumou, et al.\n2020. “An assessment of community-based\nadaptation initiatives in the Pacific Islands.” Nature\nClimate Change 10 (7): 628–39. https://doi.org/10.1038/s41558-020-0813-1.\n\n\nMilzman, Jesse, and Cody Moser. 2023. “Decentralized core-periphery structure in social networks\naccelerates cultural innovation in agent-based model.” In\nProc. Ofthe 22nd International Conference on Autonomous Agents and\nMultiagent Sys- Tems (AAMAS 2023). http://arxiv.org/abs/2302.12121.\n\n\nNalau, Johanna, Susanne Becken, Johanna Schliephack, Meg Parsons, Cilla\nBrown, and Brendan Mackey. 2018. “The role of\nindigenous and traditional knowledge in ecosystem-based adaptation: A\nreview of the literature and case studies from the Pacific\nIslands.” Weather, Climate, and Society 10 (4):\n851–65. https://doi.org/10.1175/WCAS-D-18-0032.1.\n\n\nPearson, Jasmine, Karen E. McNamara, and Patrick D. Nunn. 2020.\niTaukei Ways of Knowing and Managing Mangroves\nfor Ecosystem-Based Adaptation. Springer International\nPublishing. https://doi.org/10.1007/978-3-030-40552-6_6.\n\n\nPiggott-McKellar, Annah E, Patrick D Nunn, Karen E McNamara, and Seci T\nSekinini. 2020. “Dam(n) Seawalls: A Case of\nClimate Change Maladaptation in Fiji.” In Managing\nClimate Change Adaptation in the Pacific Region, edited by W. Leal\nFilho, 69–84. Springer. https://doi.org/10.1007/978-3-030-40552-6.\n\n\nReady, Elspeth, and Eleanor A. Power. 2018. “Why wage earners hunt: Food sharing, social structure,\nand influence in an arctic mixed economy.” Current\nAnthropology 59 (1): 74–97. https://doi.org/10.1086/696018.\n\n\nRogers, E. M. 2003. Diffusion of Innovations. 5th ed. Free\nPress.\n\n\nRombach, M. Puck, Mason A. Porter, James H. Fowler, and Peter J. Mucha.\n2014. “Core-periphery structure in\nnetworks.” SIAM Journal on Applied Mathematics 74\n(1): 167–90. https://doi.org/10.1137/120881683.\n\n\nSmaldino, Paul E, Marco A Janssen, Vicken Hillis, Jenna Bednar, Paul E\nSmaldino, Marco A Janssen, Vicken Hillis, and Jenna Bednar. 2017.\n“Adoption as a social marker: Innovation\ndiffusion with outgroup aversion.” The Journal of\nMathematical Sociology 41 (1): 26–45. https://doi.org/10.1080/0022250X.2016.1250083.\n\n\nSwette, Briana, Lynn Huntsinger, and Eric F. Lambin. 2023. “Collaboration in a polarized context: lessons from public\nforest governance in the American West.” Ecology and\nSociety 28 (1). https://doi.org/10.5751/ES-13958-280129.\n\n\nTurner, Matthew A., Alyson L. Singleton, Mallory J. Harris, Ian\nHarryman, Cesar Augusto Lopez, Ronan Forde Arthur, Caroline Muraida, and\nJames Holland Jones. 2023. “Minority-group\nincubators and majority-group reservoirs support the diffusion of\nclimate change adaptations.” Philosophical\nTransactions of the Royal Society B: Biological Sciences 378\n(1889). https://doi.org/10.1098/rstb.2022.0401.\n\n\nUnited Nations. 2023. “Times of crisis, times\nof change: Science for accelerating transformations to sustainable\ndevelopment.” https://sdgs.un.org/sites/default/files/2023-09/FINAL\nGSDR 2023-Digital -110923_1.pdf.\n\n\nVan Bavel, Jay J, Dominic J Packer, and William A Cunningham. 2008.\n“The Neural Substrates of In-Group\nBias.” Psychological Science 19 (11): 1131–39.\n\n\nWitt, Alexandra, Wataru Toyokawa, Kevin N. Lala, Wolfgang Gaissmaier,\nand Charley M. Wu. 2024. “Humans flexibly\nintegrate social information despite interindividual differences in\nreward.” Proceedings of the National Academy of\nSciences 121 (39). https://doi.org/10.1073/pnas.2404928121/-/DCSupplemental.Published.",
    "crumbs": [
      "References"
    ]
  }
]